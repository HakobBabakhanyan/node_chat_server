#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var privateKey = fs.readFileSync('./encryption/key.pem', 'utf8');
var certificate = fs.readFileSync('./encryption/cert.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};


var app = require('../app');
var debug = require('debug')('ws-server:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); // todo: change port
app.set('port', port);

/**
 * Create HTTP server.
 */
const serverSecure = require('https').Server(credentials, app);

const server = http.createServer(app);


const io = require('socket.io')(serverSecure, {
    cors: {
        origin: "*"
    }
});

const stream = require('../ws/stream')(io);
io.of(/[A-Za-z0-9\/]+$/).on('connection', stream); // TODO: check token of(name, query, next)
// app.set('socket_io', io)
// let stream = require('../ws/stream')(io);
// Room.find().then( data =>{
//   data.forEach(item => {
//     io.of('/'+item.key).on('connection', stream);
//   })
// })


//

/**
 * Listen on provided port, on all network interfaces.
 */
serverSecure.listen(443)
server.listen(80);
server.on('error', onError);
serverSecure.on('error', onError);
server.on('listening', () => {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});
serverSecure.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = serverSecure.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
